var config =  require("../config");
var zohoModule = require("../zoho");

const USER = "test"; // Replace this with the name of a user for whom you have generated an access_token or pass the user within configuration param
const LIMIT = 100; // default number of results per page

/**
 * Backward compatible zoho class
 * @class zoho
 * @constructor
 * @param {Object} config
 */
function zoho(configuration){

    if(configuration){
        this.config = configuration
    }else {
        this.config = config;
    }

    this.user = this.config.user ? this.config.user : USER;
    this.zoho =  new zohoModule.Zoho({username:this.user});

    this.organizationManager = this.zoho.getOrganizationManager();
    this.organization = this.organizationManager.findOrganizationByFieldName(this.config.portal, "portalName", true);
    this.ticketManager = this.zoho.getTicketManager({orgId:this.organization.id});
    this.contactManager = this.zoho.getContactManager({orgId:this.organization.id}, "desk"); 
    this.leadManager = this.zoho.getLeadManager({orgId:this.organization.id});
}

/**
 * @method updateTicketStatus
 * @param {String} id: ticket id
 * @param {String} status: new status
 * @param {String} department name
 * @throws {Error}
 */
zoho.prototype.updateTicketStatus = function(id, status, department){

   if(!status){

        return {

            status:"failure",
            errorDetail : "lib/zoho.updateTicketStatus: Missing parameter - status."
        }
    }

    if(!department){
        department = this.config.department;
    }

    var departmentId = this.organizationManager.findDepartmentByFieldName(this.organization.id, department, "name").id;      
    var data = {

        status: status,
        departmentId: departmentId
    };

    return this.ticketManager.updateTicket(id, data);
}

/**
 * @method createTicket
 */
zoho.prototype.createTicket = function(contactName, contactEmail, subject, message, deviceId, status, department){

    if(!department){
        department = this.config.department;
    }

    if(!deviceId || !deviceId.trim().length){
        deviceId = department;
    }

    if(!status){
        status = "open";
    }

    // get department id from department name
    var departmentId = this.organizationManager.findDepartmentByFieldName(this.organization.id, department, "name").id;   

    // get contact id from contact email. We assume that email is unique per contact
    var contact = null;
    var contactList = this.contactManager.searchContactsByFieldValue(contactEmail, "email");
    if (!contactList.data || contactList.data.length == 0) {

        throw {

            errorCode: "Entity_Not_Found",
            errorDetail: "/lib/zoho.createTicket: cannot find a contact with the following email " + contactEmail
        };
    }

    var data = {

        contactId: contactList.data[0].id,
        email: contactEmail,
        // To date (2018/09/19) the new Zoho desk API does not support search by product Id/ product Name, whereas it the former version did
        // We are adding the device Id to the subject, as a hack to maintain backard compatibility with our preceding version of the connector
        subject: deviceId + ", " + subject, 
        description: message,
        customFields: {
            deviceId: deviceId
        },
        status: status,
        departmentId: departmentId
    };

    return this.ticketManager.createTicket(data);
};

/**
 * @method createLead
 */
zoho.prototype.createLead = function(name, email, source){

    // check if name is actually first name + last name, if so, split it, otherwise use it as last name
    var firstName = "";
    var lastName = "";
    var nameSplit = name.split(" ");
    if (nameSplit.length > 0) {

        firstName = nameSplit[0];
        lastName = nameSplit[1];
    }else {
        lastName = name;
    }

    var leadData = {

        "First_Name": firstName,
        "Last_Name": lastName,
        "Email": email,
        "Lead source": source,
        "DuplicateCheck": "2"
    };

    return this.leadManager.createLeads(leadData);
};

/*
 * @method getrecordsbysearch
 */
zoho.prototype.getrecordsbysearch = function(fieldName, fieldValue, department, fromindex, toindex){

    var toReplaceWithSubject = ["Product Name", "Product Id", "productName", "productId"];
    
    if(!department){
        department = this.config.department
    }

    // get department id from department name
    var departmentId = this.organizationManager.findDepartmentByFieldName(this.organization.id, department, "name").id;       
    var params = {

        from: fromindex ? fromindex : 0,//toindex ? toindex : 0,
        limit: toindex && fromindex ? toindex - fromindex : LIMIT, 
        departmentId: departmentId
    };

    if (toReplaceWithSubject.indexOf(fieldName) > -1) { // use the subject as a hack for lack of support for searching by some fields
        
        fieldName = "subject";
        fieldValue += "*"; 
    }
    
    params[fieldName] = fieldValue;    
    var ticketList = this.ticketManager.searchTicketsByFields(params); 
    var list = this._convertToLegacyStructure(ticketList.data);
    return list;
};

zoho.prototype._convertToLegacyStructure = function(ticketList) {
    
    // convert to legacy data structure
    var list = [];
    for (var i = 0; i < ticketList.length; i++) {
        
        var obj = {}
        for (var key in ticketList[i]) { 
            
            var name = key;
            switch(key) {
                    
                case "ticketNumber": name = "caseId";break;
                case "createdTime": name = "creationDate";break;
                case "webUrl": name = "uri";break;
                case "subject": ticketList[i][key] = ticketList[i][key].substring(ticketList[i][key].indexOf(",") + 1);
            }
            
            obj[name] = ticketList[i][key];      
        }       
        
        list.push(obj);
    }
    
    return {
        documents: list,
        count: list.length
    }
};

zoho.prototype.getrecords = function(fieldName, fieldValue, department){
   return this.getrecordsbysearch(fieldName, fieldValue, department, 0, LIMIT);
};
